name: CI/CD for Spring Boot with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew
        working-directory: backend

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        working-directory: backend

      - name: Build Docker image
        run: |
          docker build -t myapp:${{ github.sha }} ./backend

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag myapp:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

      # 1. SSH 키를 파일로 저장
      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      
      # 2. 디버깅: 환경 변수 출력
      - name: Debug Deploy to EC2
        run: |
          echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
          echo "EC2_KEY: Saved to ec2_key.pem"
      
      # 3. EC2에 Docker 이미지 배포
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_HOST }} "
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} &&
            docker stop myapp || true &&
            docker rm myapp || true &&
            docker run -d -p 8080:8080 --name myapp ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          "

